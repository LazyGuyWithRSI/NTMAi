#include "zscript/enemies/zombieman.txt"
#include "zscript/enemies/shotgunguy.txt"
#include "zscript/enemies/chaingunguy.txt"
#include "zscript/enemies/imp.txt"
#include "zscript/enemies/demon.txt"
#include "zscript/enemies/lostsoul.txt"
#include "zscript/enemies/cacodemon.txt"
#include "zscript/enemies/baronofhell.txt"
#include "zscript/enemies/arachnotron.txt"
#include "zscript/enemies/mancubus.txt"
#include "zscript/enemies/painelemental.txt"
#include "zscript/enemies/revenant.txt"
#include "zscript/enemies/archvile.txt"
#include "zscript/enemies/german.txt"

class NTM_Enemy : Actor {
	int ticsPerChase;
	
	property TicsPerChase: ticsPerChase;
	
	Default {
		Scale 0.666;
		Monster;
		
		+FloorClip
		+DontCorpse
	}
	
	States {
		See:
			#### # 0 {
				switch (sv_ntm_enemyMove) {
					case 0:
						SetStateLabel("DukeSee");
					break;
					
					case 1:
						SetStateLabel("BloodSee");
					break;
					
					case 2:
					default:
						SetStateLabel("SWSee");
					break;
				}
			}
			
			Stop;
	}
	
	// NTMAi monster actions
	
	action void A_NTM_BloodChase(int flags = 0) {
		if (CheckMove(pos.xy)) {
			bool noTeleport = bNoTeleport;
			Vector3 oldPos = pos;
			
			bNoTeleport = true;
			
			if (!bOnMObj && pos.z > floorZ) {
				vel.xy *= 0.5;
			} else {
				vel.xy *= 0.8;
			}
			
			A_Chase("_a_chase_default", "_a_chase_default", flags);
			SetOrigin(oldPos, true);
			bNoTeleport = noTeleport;
			A_Recoil(speed * -0.16);
		} else {
			A_Chase();
		}
	}
	
	action void A_NTM_SWChase(int flags = 0) {
		if (CheckMove(pos.xy)) {
			int tpc = NTM_Enemy(self).ticsPerChase;
			
			speed /= tpc;
			A_Chase("_a_chase_default", "_a_chase_default", flags);
			speed *= tpc;
		} else {
			A_Chase();
		}
	}
	
	action void A_NTM_SWChase2() {
		int tpc = NTM_Enemy(self).ticsPerChase;
		
		speed /= tpc;
		A_Chase(null, null, CHF_NoPlayActive | CHF_NoDirectionTurn | CHF_DontTurn);
		speed *= tpc;
	}
	
	action void A_NTM_PreDeath() {
		height = default.Height;
		bSolid = true;
		bShootable = true;
	}
	
	action void A_NTM_Death() {
		A_Scream();
		height = GetDeathHeight();
		bCorpse = true;
		bSolid = false;
		bShootable = false;
	}
	
	action void A_NTM_XDeath() {
		A_XScream();
		height = GetDeathHeight();
		bCorpse = true;
		bSolid = false;
		bShootable = false;
	}
	
	action void A_NTM_PainEnable() {
		painChance = default.painChance;
	}
	
	action void A_NTM_PainDisable() {
		painChance = 0;
	}
}