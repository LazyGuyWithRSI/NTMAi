class NTM_Shadow : Actor
{
	Default
	{
		RenderStyle "Stencil";
		StencilColor "Black";
		FloatBobPhase 0;
		+NoBlockMap
		+NoInteraction
		+NotOnAutomap
		+DontSplash
	}
	Actor caster;
	override void Tick(void)
		{if (caster)
		{
			if (bInvisible = (caster is "PlayerPawn" && players[consolePlayer].camera && players[consolePlayer].camera == caster && !(caster.player.cheats & CF_CHASECAM)))
				return;
			bInvisible = caster.bCorpse;
			sprite = caster.sprite;
			frame = caster.frame;
			angle = caster.angle;
			alpha = caster.alpha * 0.5;
			scale.x = caster.scale.x;
			scale.y = caster.scale.y * 0.1;
			double shadowPosZ = caster.floorZ;
			if (caster.pos.z > floorZ)
			{
				Actor onmo = FindOnMobj(caster, 128);
				if (onmo && onmo.pos.z + onmo.height > floorZ)
					shadowPosZ = onmo.pos.z + onmo.height;
			}
			Vector3 sPos = (caster.pos.x, caster.pos.y, shadowPosZ);
			if (players[consolePlayer].camera)
			{
				sPos.X += cos(players[consolePlayer].camera.angle) * 0.01;
				sPos.Y += sin(players[consolePlayer].camera.angle) * 0.01;
			}
			LinkContext ctx;
			UnlinkFromWorld(ctx);
			SetXYZ(sPos);
			LinkToWorld(ctx);
		}
		else
		{
			Destroy();
			return;
		}}
	Actor FindOnMObj(Actor origin, double range = 0)
	{
		BlockThingsIterator it = BlockThingsIterator.Create(origin, 1);
		while (it.Next())
		{
			let mo = it.thing;
			if (mo == self || !mo.bSolid || mo.bIsMonster || Abs(mo.pos.x - origin.pos.y) > origin.radius + mo.radius || abs(mo.pos.y - origin.pos.y) > origin.radius + mo.radius)
				continue;
			if (origin.pos.z >= mo.pos.z + mo.height && origin.pos.z <= mo.pos.z + mo.height + range)
				return mo;
		}
		return (null);
	}
}
class NTM_Blood : Blood replaces Blood
{
	Default
		{+NotOnAutomap}
	States
	{
		Spawn:
			BLUD C 8;
			BLUD B 8
				{if (!Random(0, 1 - CVar.FindCVar("cl_ntm_bloodFrequency").GetInt()))
					A_SpawnDebris("NTM_FlyingBlood", true, 1, 0.5);}
			BLUD A 8;
			Stop;
	}
}
class NTM_FlyingBlood : Actor
{
	Default
	{
		+Corpse
		+NoTeleport
		+NoBlockMap
		+NotOnAutomap
		+DropOff
		FloatBobPhase 0;
		Health 1;
		Radius 8;
		Height 1;
		Mass 1;
		Gravity 0.625;
		Scale 0.625;
	}
	States
	{
		Spawn:
			NBLO A 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			NBLO A 1;
			NBLO A 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			NBLO B 1;
			NBLO B 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			NBLO B 1;
			NBLO C 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			NBLO C 1;
			NBLO C 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			NBLO D 1;
			NBLO D 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			NBLO D 1;
			Loop;
		Crash:
			TNT1 A 0 A_Jump(127, 1);
			TNT1 A 0 A_PlaySound("misc/blood");
			TNT1 A 0 A_SpawnItem("NTM_BloodSpot", 0, 0, 0, true);
			Stop;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		scale.x *= FRandomPick(1, -1);
	}
}
class NTM_BloodTrail : NTM_FlyingBlood
{
	Default
	{
		Gravity 0.4;
		Scale 0.625;
		+DontSplash
	}
	States
	{
		Spawn:
			NBTR ABCD 3;
		Crash:
			TNT1 A 0;
			Stop;
	}
}
class NTM_BloodSpot : Actor
{
	Default
	{
		Scale 0.625;
		+MoveWithSector
		+NotOnAutomap
		+DontSplash
		FloatBobPhase 0;
	}
	States
	{
		Spawn:
			NBLS A 350 NoDelay A_JumpIf(!CVar.FindCVar("cl_ntm_bloodDetail").GetBool(), 1);
			Stop;
			NBLX ABCDEF 3;
			Stop;
	}
	override void PostBeginPlay()
	{
		if (!(self is "NTM_BloodPool"))
			bNoInteraction = true;
		if (!(self is "NTM_BloodyFootprint"))
			angle = RandomPick(0, 90, 180, 270);
		Super.PostBeginPlay();
	}
}
class NTM_BloodPool : NTM_BloodSpot
{
	bool end;
	Default
	{
		Scale 1;
		+Special
		Radius 32;
	}
	States
	{
		Spawn:
			NBLP A 200;
			NBLP B -1;
			Stop;
	}
	override void Touch(Actor other)
		{if (other && other is "PlayerPawn")
		{
			let a = NTM_Actor(other.FindInventory("NTM_Actor", true));
			if (a)
			{
				a.fpBlood = self;
				a.fpDuration = 100;
				if (other.vel.Length() > 0.5)
				{
					A_SetSize(radius - 0.28);
					A_SetScale(scale.x - 0.01);
				}
				if (scale.x < 0.01)
					end = true;
			}
		}}
	override void Tick()
	{
		Super.Tick();
		if (!target || end)
			Destroy();
	}
}
class NTM_BloodyFootprint : NTM_BloodSpot
{
	Default
	{
		+FloorClip
		Scale 0.625;
	}
	States
	{
		Spawn:
			NBLF A 350;
			Stop;
	}
}
class NTM_RealGibs : RealGibs
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_PlaySound("misc/gibbed");
				if (sv_ntm_bloodStretch)
					A_SpawnItemEx("NTM_GibMeat", flags: SXF_TransferTranslation);
				Destroy();
			}
			Goto Super::Spawn;
	}
}
class NTM_SmallGibs : RealGibs
{
	Default
	{
		Radius 20;
		FloatBobPhase 0;
	}
	States
	{
		Spawn:
			NGIB A -1;
			Stop;
	}
}
class NTM_MediumGibs : NTM_SmallGibs
{
	Default
		{Radius 32;}
	States
	{
		Spawn:
			NGIB B -1;
			Stop;
	}
}
class NTM_BigGibs : NTM_SmallGibs
{
	Default
		{Radius 44;}
	States
	{
		Spawn:
			NGIB C -1;
			Stop;
	}
}
class NTM_GibMeat : RealGibs
{
	Default
	{
		+ForceYBillboard
		Radius 3;
	}
	States
	{
		Spawn:
			NGIB D -1;
			Stop;
	}
	override void BeginPlay()
	{
		if (Abs(ceilingZ - pos.z) > 16)
		{
			Destroy();
			return;
		}
		Super.BeginPlay();
	}
	override void Tick()
	{
		Super.Tick();
		scale.y = (ceilingZ - pos.z) / 49;
	}
}
class NTM_FlyingGib1 : NTM_FlyingBlood
{
	Default
	{
		Gravity 0.5;
		Scale 0.5;
		+FloorClip
	}
	States
	{
		Spawn:
			NGI1 A 0;
		Spawn2:
			#### A 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			#### A 1;
			#### A 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			#### B 1;
			#### B 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			#### B 1;
			#### C 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			#### C 1;
			#### C 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			#### D 1;
			#### D 1 A_SpawnItem("NTM_BloodTrail", 0, 0, false, true);
			#### D 1;
			Loop;
		Crash:
			#### E 0
			{
				A_PlaySound("misc/blood");
				vel.xy *= 0;
			}
			#### E 700 A_JumpIf(!CVar.FindCVar("cl_ntm_gibDetail").GetBool(), 1);
			Stop;
			TNT1 A 0
				{for (int i; i < Random(2, 3); i++)
					A_SpawnDebris("NTM_FlyingBlood", true, 0.75, 0.5);}
			Stop;
	}
}
class NTM_FlyingGib2 : NTM_FlyingGib1
{
	States
	{
		Spawn:
			NGI2 A 0;
			Goto Spawn2;
	}
}
class NTM_FlyingGib3 : NTM_FlyingGib1
{
	States
	{
		Spawn:
			NGI3 A 0;
			Goto Spawn2;
	}
}
class NTM_Explosion : Actor
{
	Default
	{
		+Corpse
		+NoTeleport
		+NoBlockMap
		+NoGravity
		+NotOnAutomap
		FloatBobPhase 0;
	}
	States
	{
		Spawn:
			NEXP A 3 NoDelay Bright
				{scale.x *= FRandomPick(-1, 1);}
			NEXP BCDEFGHIJ 3 Bright;
			Stop;
	}
}
class NTM_Debris : Actor
{
	Default
	{
		+Corpse
		+NoTeleport
		+NoBlockMap
		+NotOnAutomap
		FloatBobPhase 0;
		Health 10;
		Radius 8;
		Height 1;
		Mass 1;
		Gravity 0.5;
	}
	States
	{
		Spawn:
			NDEB A 0 A_Jump(127, 5);
			NDEB ABCD 3;
			Goto Spawn + 1;
			NDEB EFGH 3;
			Goto Spawn + 5;
		Crash:
			TNT1 A 0;
			Stop;
	}
}
class NTM_BulletCasing : Actor
{
	Default
	{
		+Corpse
		+NoTeleport
		+NoBlockMap
		+NotOnAutomap
		FloatBobPhase 0;
		Scale 0.1;
		Radius 1;
		Height 1;
		Gravity 1;
		+CanBounceWater
		+DontSplash
		+Missile
		+UseBounceState
		BounceSound "misc/casing";
		BounceType "Doom";
	}
	States
	{
		Spawn:
			NBUL A 0;
		Roll:
			#### ABCDEFGH 2;
			Loop;
		Bounce:
			#### A 0
				{if (!CVar.FindCVar("cl_ntm_casing").GetBool())
				{
					A_StopSound();
					Destroy();
				}}
			Goto Roll;
		Death:
			#### C 350 A_Jump(128, 1);
			Stop;
			#### G 350;
			Stop;
	}
}
class NTM_ShellCasing : NTM_BulletCasing
{
	Default
		{BounceSound "misc/casing3";}
	States
	{
		Spawn:
			NSHE A 0;
			Goto Roll;
	}
}
class NTM_ShellCasing2 : NTM_ShellCasing
{
	Default
		{Translation "168:191=192:207", "32:47=240:247";}
}
class NTM_WaterSplash : Actor
{
	Default
	{
		+NoInteraction
		+NotOnAutoMap
		FloatBobPhase 0;
	}
	States
	{
		Spawn:
			NWAT ABC 5;
			Stop;
	}
}
class NTM_BloodSplash : NTM_WaterSplash
{
	Default
		{Translation "192:207=176:191";}
}
class NTM_LavaSplash : NTM_WaterSplash
{
	Default
		{Translation "192:199=160:163", "200:207=175:191";}
}
class NTM_LavaSmoke : Actor
{
	Default
	{
		+NoInteraction
		+NotOnAutomap
		FloatBobPhase 0;
		RenderStyle "Translucent";
		Alpha 0.7;
	}
	States
	{
		Spawn:
			NLAV ABCDEF 3;
			Stop;
	}
}
class NTM_NukeSplash : NTM_WaterSplash
{
	Default
		{Translation "192:207=112:127";}
}
class NTM_NukeSmoke : NTM_LavaSmoke
{
	Default
		{Scale 0.7;}
}
class NTM_SlimeSplash : NTM_WaterSplash
{
	Default
		{Translation "192:207=61:79";}
}
class NTM_Tracer : FastProjectile
{
	Default
	{
		Radius 1;
		Height 1;
		Speed 175;
		Scale 0.5;
		FloatBobPhase 0;
		-ExplodeOnWater
	}
	States
	{
		Spawn:
			PUFF A -1 Bright;
		Death:
			Stop;
	}
}
class NTM_BulletPuff : BulletPuff replaces BulletPuff
{
	Default
		{AttackSound "misc/puff";}
}
class NTM_FistPuff : BulletPuff
{
	Default
		{AttackSound "player/male/fist";}
}
class NTM_BerserkPuff : NTM_FistPuff
{
	Default
		{DamageType "Berserk";}
}
class NTM_SawPuff : BulletPuff
{
	Default
	{
		DamageType "Saw";
		AttackSound "misc/puff4";
	}
}
class NTM_SawPuff2 : NTM_SawPuff
{
	Default
	{
		DamageType "Saw2";
		+ExtremeDeath
	}
}
class NTM_SSGPuff : NTM_BulletPuff
{
	Default
		{DamageType "SSG";}
}
class NTM_SawedPuff : NTM_BulletPuff
{
	Default
		{DamageType "Sawed";}
}
class NTM_Rail : Actor
{
	Default
	{
		+NoGravity
		Scale 0.8;
		FloatBobPhase 0;
	}
	States
	{
		Spawn:
			NRAI A 2 NoDelay
			{
				scale.x *= FRandomPick(-1, 1);
			}
			NRAI BCDE 2;
			Stop;
	}
}
class NTM_RailRed : NTM_Rail
{
	Default
	{
		+AlwaysPuff
		Scale 0.5;
		Translation "192:207=176:191", "4:4=176:176";
	}
}
class NTM_RailRed2 : NTM_Rail
{
	States
	{
		Spawn:
			NUNR ABC 3;
			Stop;
	}
}
class NTM_Burn : NTM_Monster
{
	class<Actor> original;
	Default
	{
		-IsMonster
		-CountKill
		-Solid
		+NonShootable
		+NotAutoaimed
		+DropOff
		+NoBlood
		+NoTarget
		Height 56;
		Speed 1;
		Scale 0.65;
	}
	States
	{
		Spawn:
			NBUR A 0 A_SpawnItemEx("RocketSmokeTrail", zofs: 48, zvel: 0.6);
			NBUR AAAAABBBBBCCCCCDDDDD 1 Bright
			{
				A_Wander();
				A_Recoil(-0.38);
			}
			NBUR A 0 A_Jump(32, 1);
			Loop;
			NBUR A 0 A_Die;
		Death:
			NBUR E 5 Bright A_Scream;
			NBUR FG 5 Bright;
			NBUR H 5 Bright A_SpawnItemEx("RocketSmokeTrail", zofs: 16, zvel: 0.6);
			NBUR IJK 5 Bright;
			NBUR K 0 A_Jump(32, 1);
			Goto Death + 3;
			NBUR LMNO 5 Bright;
			NBUR P -1;
			Stop;
		Raise:
			NBUR ONMLGFE 3 Bright;
			NBUR A 0
				{if (original)
				{
					Actor revive = Spawn(original, pos);
					if (revive)
					{
						revive.CopyFriendliness(self, true);
						revive.angle = angle;
					}
				}}
			Stop;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (original)
		{
			string snd = "burn/zombie";
			switch (Name(original.GetClassName()))
			{
				case ('NTM_SSGuard'):
					snd = "wolfss/burn";
				break;
				case ('NTM_Imp'):
					snd = "burn/imp";
				break;
			}
			A_PlaySound(Sound(snd));
			deathSound = GetDefaultByType(original).deathSound;
		}
		else
			Destroy();
	}
}