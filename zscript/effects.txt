#include "zscript/effects/blood.txt"

// Explosion
class NTM_Explosion : Actor {
	Default {
		RenderStyle "Add";
		Translation "NTM_Explosion";
		FloatBobPhase 0;
		
		+Corpse
		+NoTeleport
		+NoBlockMap
		+NoGravity
		+NotOnAutomap
		+ForceXYBillboard
		+ZDoomTrans
	}
	
	States {
		Spawn:
			NEXP ABCDEFGHIJ 3 Bright;
			Stop;
	}
}

// Explosion 2
class NTM_Explosion2 : NTM_Explosion {
	Default {
		Scale 0.75;
	}
	
	States {
		Spawn:
			NEX2 ABCDEFGHIJKLMNOPQRSTU 2 Bright;
			Stop;
	}
}

// Gib Base
class NTM_Gib : Actor {
	Default {
		FloatBobPhase 0;
		Health 10;
		Radius 4;
		Height 8;
		Mass 1;
		Gravity 0.5;
		BounceType "Doom";
		
		+Corpse
		+NoTeleport
		+NoBlockMap
		+NotOnAutomap
		+BounceOnWalls
		+DontSplash
		+ThruActors
		+FloorClip
	}
	
	States {
		Spawn:
		Crash:
			TNT1 A 0;
			Stop;
	}
	
	override void PostBeginPlay() {
		Super.PostBeginPlay();
		scale.x *= FRandomPick(-1, 1);
		scale.y *= FRandomPick(-1, 1);
	}
}

// Barrel Gib
class NTM_BarrelGib : NTM_Gib {
	Default {
		Scale 0.25;
		
		+ForceXYBillboard
	}
	
	States {
		Spawn:
			NBGB ABCDEFGH 3;
			Loop;
	}
}

// Bullet Puff
class NTM_BulletPuff : BulletPuff replaces BulletPuff {
	Default {
		Scale 0.8;
		FloatBobPhase 0;
		
		+PuffOnActors
		+NotOnAutomap
		+ForceXYBillboard
	}
	
	States {
		Spawn:
			PUFF A 4 Bright NoDelay A_StartSound("NTM_BulletPuff/miss");
			PUFF BCD 4;
			Stop;
			
		Melee:
			PUFF C 4 A_StartSound("player/male/fist");
			PUFF D 4;
			Stop;
		
		XDeath:
			TNT1 A 0 A_StartSound("NTM_BulletPuff/hit");
			Stop;
    }
}

// Bullet Casing
class NTM_BulletCasing : NTM_Gib {
	Default {
		Scale 0.16;
		Radius 1;
		Height 1;
		Gravity 1;
		BounceSound "NTM_BulletCasing/bounce";
		BounceType "Doom";
		BounceFactor 0.75;
		
		-Corpse
		+Missile
		+CanBounceWater
		+UseBounceState
	}
	
	States
	{
		Spawn:
			NBUL A 0;
		Roll:
			#### ABCDEFGH 2;
			Loop;
			
		Bounce:
			#### A 0;
			Goto Roll;
			
		Death:
			#### # 0 {
				bMissile = false;
				A_SetFloorClip();
			}
			
			#### C 350 A_Jump(128, 1);
			Stop;
			#### G 350;
			Stop;
	}
}

// Shell Casing
class NTM_ShellCasing : NTM_BulletCasing {
	Default {
		BounceSound "NTM_ShellCasing/bounce";
	}
	
	States {
		Spawn:
			NSHE A 0;
			Goto Roll;
	}
}

// Blood-Style Blast
class NTM_Blast : Actor {
	int blastDamage, blastDamage2, blastRadius, blastFlags;
	
	Default {
		Radius 1;
		Height 1;
		
		+NoInteraction
		+NotOnAutomap
	}
	
	States {
		Spawn:
			TNT1 A -1;
			Stop;
	}
	
	override void Tick() {
		Super.Tick();
		
		/* Expand the explosion sphere.
		   Damage and velocity is dealt depending on how much the sphere has
		   expanded. This effect finishes in 8 tics. */
		double rad = radius * 1.3;
		double expand = Ceil(blastRadius * 0.125);
		BlockThingsIterator it = BlockThingsIterator.Create(self, radius);
		
		while (it.Next()) {
			let mo = it.thing;
			
			if (mo != self && (mo != target || blastFlags & XF_HurtSource) && mo != master && !mo.bNoRadiusDmg) {
				double dist = Max(0.0001, Distance3D(mo));
				
				if (dist <= rad && CheckSight(mo, SF_IgnoreVisibility | SF_IgnoreWaterBoundary)) {
					mo.DamageMObj(self, target, blastDamage, damageType, DMG_Thrustless | DMG_Explosion);
					
					// Fling objects away
					if (!mo.bDontThrust && (mo is "PlayerPawn" || mo.bIsMonster || mo.bShootable) && (!mo.bCorpse || mo.vel.Length() > 0.16)) {
						Vector3 mPos = mo.pos;
						Vector3 unit = (mPos.x - pos.x, mPos.y - pos.y, (mPos.z + (mo.height * 0.5)) - pos.z).Unit();
						
						if (unit.z > 0) {
							unit.z *= 1.6;
						}
						
						mo.vel += (unit * blastDamage * expand * 0.5) / mo.mass;
					}
				}
			}
		}
		
		if (radius >= blastRadius) {
			Destroy();
			
			return;
		}
		
		blastDamage -= Floor(blastDamage2 * 0.125);
		A_SetSize(radius + expand, height + expand);
	}
}