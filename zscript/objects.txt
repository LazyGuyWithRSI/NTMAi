class NTM_Breakable : Actor
{
	Default
	{
		Health 1;
		DeathSound "misc/break";
		Radius 16;
		Height 48;
		ProjectilePassHeight -16;
		+DontThrust
		+NoBlood
		+NoBloodDecals
		+NoIceDeath
		+NotAutoaimed
		+Shootable
		+Solid
	}
}
class NTM_Column : NTM_Breakable replaces Column
{
	States
	{
		Spawn:
			COLU A -1 Bright;
			Stop;
		Death:
			NBCO A -1
			{
				A_Scream();
				A_SetSize(16, 48);
			}
			Stop;
	}
}
class NTM_TechLamp : NTM_Breakable replaces TechLamp
{
	Default
		{Height 80;}
	States
	{
		Spawn:
			TLMP ABCD 4 Bright;
			Loop;
		Death:
			NBTL A -1
			{
				A_Scream();
				A_SetSize(16, 80);
			}
			Stop;
	}
}
class NTM_TechLamp2 : NTM_Breakable replaces TechLamp2
{
	Default
		{Height 60;}
	States
	{
		Spawn:
			TLP2 ABCD 4 Bright;
			Loop;
		Death:
			NBT2 A -1
			{
				A_Scream();
				A_SetSize(16, 60);
			}
			Stop;
	}
}
class NTM_BloodyTwitch : BloodyTwitch replaces BloodyTwitch
{
	Default
	{
		+DontThrust
		+NoDamage
		+NotAutoaimed
		+Shootable
	}
	States
	{
		Spawn:
			GOR1 A -1;
			Stop;
	}
}
class NTM_DeadStick : DeadStick replaces DeadStick
{
	Default
	{
		+DontThrust
		+NoDamage
		+NotAutoaimed
		+Shootable
	}
}
class NTM_HangNoGuts : HangNoGuts replaces HangNoGuts
{
	Default
	{
		Health 15;
		+DontThrust
		+NotAutoaimed
		+Shootable
	}
	States
	{
		Death:
			HDB1 A 0 A_SpawnItemEx("NTM_HangBNoBrain", 0, 0, -3);
			Stop;
		XDeath:
			HDB1 A 0
			{
				A_SpawnItemEx("HangTNoBrain", 0, 0, 26);
				A_SpawnItemEx("NTM_FlyingGib2", 0, 0, 16, Random(-2, 2), Random(-2, 2));
				A_SpawnItemEx("NTM_FlyingGib3", 0, 0, 16, Random(-2, 2), Random(-2, 2));
			}
			Stop;
	}
}
class NTM_HangBNoBrain : NTM_HangNoGuts replaces HangBNoBrain
{
	States
	{
		Spawn:
			HDB2 A -1;
			Stop;
		Death:
		XDeath:
			HDB2 A 0
			{
				A_SpawnItemEx("HangTNoBrain", 0, 0, 29);
				A_SpawnItemEx("NTM_FlyingGib2", 0, 0, 16, Random(-2, 2), Random(-2, 2));
				A_SpawnItemEx("NTM_FlyingGib3", 0, 0, 16, Random(-2, 2), Random(-2, 2));
			}
			Stop;
	}
}
class NTM_LiveStick : NTM_DeadStick replaces LiveStick
{
	Default
	{
		Health 20;
		-NoDamage
	}
	States
	{
		Spawn:
			POL6 AB 8;
			Loop;
		Death:
			POL6 A -1 A_SetSize(16, 64);
			Stop;
	}
}
class NTM_Meat : NTM_HangNoGuts replaces Meat2
{
	Default
		{Health 60;}
	States
	{
		Spawn:
			GOR2 A -1;
			Stop;
		Death:
		XDeath:
			GOR2 A 0
			{
				A_XScream();
				A_SpawnItemEx("Meat4", -4, 0, 16);
				A_SpawnItemEx("NTM_FlyingGib1", 0, 0, 4, Random(-2, 2), Random(-2, 2));
				A_SpawnItemEx("NTM_FlyingGib2", 0, 0, 16, Random(-2, 2), Random(-2, 2));
				A_SpawnItemEx("NTM_FlyingGib3", 0, 0, 16, Random(-2, 2), Random(-2, 2));
			}
			Stop;
	}
}
class NTM_Meat2 : NTM_Meat replaces Meat3
{
	States
	{
		Spawn:
			GOR3 A -1;
			Stop;
		Death:
		XDeath:
			GOR3 A 0
			{
				A_XScream();
				A_SpawnItemEx("Meat5", -1, 0, 32);
				A_SpawnItemEx("NTM_FlyingGib1", 0, 0, 4, Random(-2, 2), Random(-2, 2));
				A_SpawnItemEx("NTM_FlyingGib2", 0, 0, 16, Random(-2, 2), Random(-2, 2));
				A_SpawnItemEx("NTM_FlyingGib3", 0, 0, 16, Random(-2, 2), Random(-2, 2));
			}
			Stop;
	}
}
class NTM_Meat3 : NTM_Meat replaces NonsolidMeat2
{
	Default
		{-Solid}
	States
	{
		Death:
		XDeath:
			GOR2 A 0
			{
				A_XScream();
				A_SpawnItemEx("NonsolidMeat4", -4, 0, 16);
				A_SpawnItemEx("NTM_FlyingGib1", 0, 0, 4, Random(-2, 2), Random(-2, 2));
				A_SpawnItemEx("NTM_FlyingGib2", 0, 0, 16, Random(-2, 2), Random(-2, 2));
				A_SpawnItemEx("NTM_FlyingGib3", 0, 0, 16, Random(-2, 2), Random(-2, 2));
			}
			Stop;
	}
}
class NTM_Meat4 : NTM_Meat3 replaces NonsolidMeat3
{
	States
	{
		Spawn:
			GOR3 A -1;
			Stop;
		Death:
		XDeath:
			GOR3 A 0
			{
				A_XScream();
				A_SpawnItemEx("NonsolidMeat5", -1, 0, 32);
				A_SpawnItemEx("NTM_FlyingGib1", 0, 0, 4, Random(-2, 2), Random(-2, 2));
				A_SpawnItemEx("NTM_FlyingGib2", 0, 0, 16, Random(-2, 2), Random(-2, 2));
				A_SpawnItemEx("NTM_FlyingGib3", 0, 0, 16, Random(-2, 2), Random(-2, 2));
			}
			Stop;
	}
}
class NTM_Shell : Shell replaces Shell
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		int soul = sv_ntm_boomShell;
		if ((soul == 1 || (soul == 2 && Random(0, 1))) && curSector.IsSecret())
		{
			Spawn("NTM_ExplosiveShell", pos);
			Destroy();
		}
	}
}
class NTM_ExplosiveShell : Ammo
{
	Default
	{
		Inventory.PickUpMessage "Picked up some explosive shells.";
		Inventory.Amount 4;
		Inventory.MaxAmount 10;
		Ammo.BackpackAmount 2;
		Ammo.BackpackMaxAmount 20;
		Translation "168:191=192:207";
	}
	States
	{
		Spawn:
			NESH A -1;
			Stop;
	}
}
class NTM_RocketAmmo : RocketAmmo replaces RocketAmmo
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (players[consolePlayer].mo is "NTM_NewPlayer")
		{
			Spawn("NTM_GrenadeAmmo", pos);
			Destroy();
			return;
		}
		int soul = sv_ntm_homingRocket;
		if ((soul == 1 || (soul == 2 && Random(0, 1))) && curSector.IsSecret())
		{
			Spawn("NTM_HomingAmmo", pos);
			Destroy();
		}
	}
}
class NTM_GrenadeAmmo : RocketAmmo
{
	Default
	{
		Inventory.PickUpMessage "Picked up a grenade.";
	}
	States
	{
		Spawn:
			NGBA A -1;
			Stop;
	}
}
class NTM_HomingAmmo : Ammo
{
	Default
	{
		Inventory.PickUpMessage "Picked up a homing rocket.";
		Inventory.Amount 1;
		Inventory.MaxAmount 10;
		Ammo.BackpackAmount 1;
		Ammo.BackpackMaxAmount 20;
		Translation "168:191=192:207";
	}
	States
	{
		Spawn:
			NHRO A -1;
			Stop;
	}
}
class NTM_RocketBox : CustomInventory replaces RocketBox
{
	Default
		{Inventory.PickUpMessage "Picked up an explosives pack.";}
	States
	{
		Spawn:
			BROK A -1;
			Stop;
		Pickup:
			TNT1 A 0 A_JumpIfInventory("RocketAmmo", 0, 2);
			TNT1 A 0
			{
				A_GiveInventory("RocketAmmo", 5);
				if (Random(0, 1))
					if (players[consolePlayer].mo is "NTM_NewPlayer")
						A_GiveInventory("NTM_C4Ammo", 1);
					else
						A_GiveInventory("NTM_Grenade", 1);
			}
			Stop;
			TNT1 A 0;
			Fail;
	}
}
class NTM_Backpack : CustomInventory replaces Backpack
{
	Default
	{
		Height 26;
		Inventory.PickupMessage "$GOTBACKPACK";
		+Inventory.AlwaysPickUp
	}
	States
	{
		Spawn:
			BPAK A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				if (players[consolePlayer].mo is "NTM_NewPlayer")
					A_GiveInventory("NTM_C4Ammo", 1);
				else
					A_GiveInventory("NTM_Grenade", 1);
				A_GiveInventory("Backpack", 1);
			}
			Stop;
	}
}
class NTM_BlurSphere : CustomInventory replaces BlurSphere
{
	Default
	{
		+CountItem
		+VisibilityPulse
		+ZDoomTrans
		+Inventory.AutoActivate
		+Inventory.AlwaysPickUp
		+Inventory.BigPowerUp
		Inventory.MaxAmount 0;
		RenderStyle "Translucent";
		Inventory.PickupMessage "$GOTINVIS";
	}
	States
	{
		Spawn:
			PINS ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 A_StartSound("misc/p_pkup", 5, ChanF_Maybe_Local);
			TNT1 A 0 A_GiveInventory("PowerInvisibility", 1);
			TNT1 A 0 A_SetBlend("Black", 0.5, 35); 
			Stop;
			
	}
}
class NTM_Soulsphere : CustomInventory replaces Soulsphere
{
	Default
	{
		+CountItem
		+Inventory.AutoActivate
		+Inventory.AlwaysPickUp
		+Inventory.FancyPickupSound
		Inventory.PickupMessage "$GOTSUPER";
		Inventory.PickupSound "";
	}
	States
	{
		Spawn:
			SOUL ABCDCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 A_StartSound("misc/p_pkup", 5, ChanF_Maybe_Local);
			TNT1 A 0 A_GiveInventory("NTM_SoulsphereHealth", 1);
			TNT1 A 0 A_SetBlend("Blue", 0.5, 35); 
			Stop;
	}
	override void PostBeginPlay()
	{
		int soul = sv_ntm_soulsphere;
		if (soul == 1 || (soul == 2 && !curSector.IsSecret()))
		{
			Spawn("NTM_PortableMedkit", pos);
			Destroy();
		}
	}
}
class NTM_SoulsphereHealth : Health
{
	Default
	{
		Inventory.Amount 100;
		Inventory.MaxAmount 200;
		+Inventory.AlwaysPickup
	}
}
class NTM_Megasphere : Megasphere replaces Megasphere
{
	Default
	{
		Inventory.PickupSound "";
	}
	States
	{
		Pickup:
			TNT1 A 0 A_StartSound("misc/p_pkup", 5, ChanF_Maybe_Local);
			TNT1 A 0 A_GiveInventory("BlueArmorForMegasphere", 1);
			TNT1 A 0 A_GiveInventory("MegasphereHealth", 1);
			TNT1 A 0 A_SetBlend("White", 0.5, 35); 
			Stop;
	}
}
class NTM_InvulnerabilitySphere : CustomInventory replaces InvulnerabilitySphere
{
	Default
	{
		+CountItem
		+Inventory.AutoActivate
		+Inventory.AlwaysPickUp
		+Inventory.BigPowerUp
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "$GOTINVUL";
	}
	States
	{
		Spawn:
			PINV ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 A_StartSound("misc/p_pkup", 5, ChanF_Maybe_Local);
			TNT1 A 0 A_GiveInventory("InvulnerabilitySphere", 1);
			TNT1 A 0 A_SetBlend("White", 1, 70); 
			Stop;
	}
}
class NTM_PortableMedkit : CustomInventory
{
	Default
	{
		+Inventory.IsHealth
		+Inventory.InvBar
		Inventory.Amount 100;
		Inventory.MaxAmount 100;
		Inventory.InterHubAmount 0x7FFFFFFF;
		Inventory.PickupMessage "Portable Medkit";
		Inventory.PickupSound "misc/i_pkup";
		Inventory.Icon "NPMKB0";
		Tag "Portable Medkit";
	}
	States
	{
		Spawn:
			NPMK A -1 Bright;
			Stop;
		Use:
			TNT1 A 0 A_JumpIf(health >= 100, "UseEnd");
		UseLoop:
			TNT1 A 0 A_JumpIf(health >= 100, 4);
			TNT1 A 0 A_TakeInventory("NTM_PortableMedkit", 1);
			TNT1 A 0 A_GiveInventory("Health", 1);
			TNT1 A 0 A_JumpIfInventory("NTM_PortableMedkit", 1, "UseLoop");
			TNT1 A 0 A_StartSound("misc/i_pkup", 5, ChanF_Maybe_Local);
			TNT1 A 0 A_Log("Used the portable medkit.", true);
			TNT1 A 0;
		UseEnd:
			TNT1 A 0;
			Fail;
	}
}
class NTM_Berserk : CustomInventory replaces Berserk
{
	Default
	{
		+Inventory.IsHealth
		+Inventory.InvBar
		Inventory.Amount 100;
		Inventory.MaxAmount 100;
		Inventory.InterHubAmount 0x7FFFFFFF;
		Inventory.PickupMessage "Berserk Pack";
		Inventory.PickupSound "misc/i_pkup";
		Inventory.Icon "NBERB0";
		Tag "Berserk Pack";
	}
	States
	{
		Spawn:
			NBER A -1 Bright;
			Stop;
		Use:
			TNT1 A 0 A_JumpIfInventory("NTM_PowerBerserk", 1, "Deactivate");
			TNT1 A 0 A_StartSound("misc/p_pkup", 5, ChanF_Maybe_Local);
			TNT1 A 0 A_Log("Rip and tear!", true);
			TNT1 A 0 HealThing(100, 0);
			TNT1 A 0 A_SelectWeapon("NTM_Fist");
			TNT1 A 0 A_GiveInventory("NTM_PowerBerserk");
			TNT1 A 0 ACS_NamedExecuteAlways("NTM_Use_Berserk");
			Fail;
		Deactivate:
			TNT1 A 0;
			Stop;
	}
}
class NTM_PowerBerserk : PowerSpeed
{
	Default
	{
		Powerup.Duration 0x7FFFFFFF;
		Powerup.Color "Red";
	}
}
class NTM_RadSuit : CustomInventory replaces RadSuit
{
	Default
	{
		Height 46;
		+Inventory.InvBar
		Inventory.Amount 100;
		Inventory.MaxAmount 100;
		Inventory.InterHubAmount 0x7FFFFFFF;
		Inventory.PickupMessage "$GOTSUIT";
		Inventory.Icon "NSUIA0";
		Tag "Radiation Suit";
	}
	States
	{
		Spawn:
			SUIT A -1 Bright;
			Stop;
		Use:
			TNT1 A 0 A_JumpIfInventory("NTM_PowerRadSuit", 1, "Deactivate");
			TNT1 A 0
			{
				A_StartSound("item/suit");
				A_Log("Radiation suit on", true);
				A_GiveInventory("NTM_PowerRadSuit");		
				ACS_NamedExecuteAlways("NTM_Use_RadSuit");
			}
			Fail;
		Deactivate:
			TNT1 A 0
			{
				A_TakeInventory("NTM_PowerRadSuit", 1);
				A_StartSound("item/suit");
				A_Log("Radiation suit off", true);
			}
			Fail;
	}
}
class NTM_PowerRadSuit : PowerProtection
{
	Default
	{
		Powerup.Duration 0x7FFFFFFF;
		Powerup.Color "";
		DamageFactor "Poison", 0;
		DamageFactor "PoisonCloud", 0;
		DamageFactor "Slime", 0;
		DamageFactor "Fire", 0.5;
		DamageFactor "Ice", 0.5;
	}
}
class NTM_Infrared : CustomInventory replaces Infrared
{
	Default
	{
		+Inventory.InvBar
		Inventory.Amount 100;
		Inventory.MaxAmount 100;
		Inventory.InterHubAmount 0x7FFFFFFF;
		Inventory.PickupMessage "$GOTVISOR";
		Inventory.Icon "NINFA0";
		Tag "Light Amplification Visor";
	}
	States
	{
		Spawn:
			PVIS A 6 Bright;
			PVIS B 6;
			Loop;
		Use:
			TNT1 A 0 A_JumpIfInventory("NTM_PowerInfrared", 1, "Deactivate");
			TNT1 A 0 A_StartSound("item/goggles");
			TNT1 A 0 A_Log("Light amplification visor on", true);
			TNT1 A 0 A_GiveInventory("NTM_PowerInfrared");
			TNT1 A 0 ACS_NamedExecuteAlways("NTM_Use_Infrared");
			Fail;
		Deactivate:
			TNT1 A 0 A_TakeInventory("NTM_PowerInfrared",1);
			TNT1 A 0 A_Log("Light amplification visor off", true);
			Fail;
	}
}
class NTM_PowerInfrared : PowerLightAmp
{
	Default
	{
		Powerup.Duration 0x7FFFFFFF;
		Powerup.ColorMap 0.0, 0.0, 0.0, 0.2, 1.0, 0.2;
	}
}
class NTM_Grenade : CustomInventory
{
	Default
	{
		Scale 0.5;
		+Inventory.InvBar
		Inventory.MaxAmount 20;
		Inventory.InterHubAmount 0x7FFFFFFF;
		Inventory.Icon "NGREG0";
		Inventory.PickupMessage "Picked up a hand grenade.";
	}
	States
	{
		Spawn:
			NGRE H -1;
			Stop;
		Use:
			TNT1 A 0 A_Print("Press <Hand Grenade> to throw a hand grenade.");
			Fail;
	}
}
class NTM_ExplosiveBarrel : ExplosiveBarrel replaces ExplosiveBarrel
{
	Default
		{Height 28;}
	States
	{
		Spawn:
			NBBA ABCB 6;
			Loop;
		Death:
			NBBA D 4 Bright A_ScaleVelocity(1);
			NBBA D 0
			{
				A_NoBlocking();
				A_RadiusGive("NTM_CorpseGib", 128, RGF_Corpses, 1);
				A_StartSound("world/barrelx", 5, 0, 1, Attn_Norm, FRandom(0.3, 1.5));
				A_SpawnItemEx("NTM_Explosion", 0, 0, 32);
				A_SpawnDebris("NTM_Debris");
				A_Explode();
			}
			TNT1 A 10
				{if (NTMAI.CanQuake())
					A_Quake(2, 10, 0, 400, "");}
			TNT1 A 1067 A_BarrelDestroy;
			TNT1 A 5 A_Respawn;
			Wait;
	}
}
class NTM_DeadZombieman : NTM_Zombieman replaces DeadZombieman
{
	Default
	{
		-Solid
		-CountKill
		+NotAutoaimed
		+ThruGhost
	}
	States
	{
		Spawn:
		Raise:
			TNT1 A 0 A_Die;
			Wait;
		Death:
			NZOM L -1;
			Stop;
	}
}
class NTM_DeadShotgunGuy : NTM_DeadZombieman replaces DeadShotgunGuy
	{Default
		{Translation "128:143=100:111", "144:151=104:111", "152:159=104:111", "112:127=96:111", "78:79=5:6", "1:2=6:7", "16:47=24:47";}}
class NTM_DeadImp : NTM_DeadZombieman replaces DeadDoomImp
{
	Default
		{DeathSound "";}
	States
	{
		Death:
			NIMP P -1;
			Stop;
	}
}
class NTM_DeadDemon : NTM_DeadZombieman replaces DeadDemon
	{States
	{
		Death:
			NDEM M -1;
			Stop;
	}}
class NTM_DeadCacodemon : NTM_DeadZombieman replaces DeadCacodemon
{
	Default
		{BloodColor "Blue";}
	States
	{
		Death:
			NCAC K -1;
			Stop;
	}
}
class NTM_DeadMarine : NTM_DeadZombieman Replaces DeadMarine
	{States
	{
		Death:
			NPLA L -1;
			Stop;
	}}
class NTM_GibbedMarine : GibbedMarine Replaces GibbedMarine
	{States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SpawnItemEx("NTM_BloodPool");
			Goto Super::Spawn;
	}}
class NTM_C4Ammo : Ammo
{
	Default
	{
		Scale 0.3;
		Inventory.Amount 1;
		Inventory.MaxAmount 20;
		Ammo.BackpackAmount 1;
		Ammo.BackpackMaxAmount 40;
		Inventory.PickupMessage "Picked up a Remote Bomb.";
	}
	States
	{
		Spawn:
			NRE2 C -1;
			Stop;
	}
}