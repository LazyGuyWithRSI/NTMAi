class NTMAI : EventHandler {
	/* ====
	   MATH
	   ==== */
	
	static float Lerp(float val1, float val2, float amount) {
		return (val1 * (1 - amount) + val2 * amount);
	}
	
	/* ========
	   HANDLING
	   ======== */
	
	override void PlayerEntered(PlayerEvent e) {
		let pmo = players[e.playerNumber].mo;
		
		if (pmo) {
			if (!pmo.CountInv("NTM_System_Actor")) {
				pmo.A_GiveInventory("NTM_System_Actor", 1);
			}
			
			// GROSS HACK: Prevent camera flinching on level start
			if (pmo is "NTM_Player") {
				NTM_Player nmo = NTM_Player(pmo);
				
				nmo.fallState = 0;
				nmo.fallTics = 0;
				nmo.fallTics2 = 0;
			}
		}
	}
	
	override void PlayerRespawned(PlayerEvent e) {
		let pmo = players[e.playerNumber].mo;
		
		if (pmo) {
			DoThingRevive(pmo);
		}
	}
	
	override void WorldThingSpawned(WorldEvent e) {
		let mo = e.thing;
		
		if (mo && mo.bIsMonster && !mo.CountInv("NTM_System_Actor")) {
			mo.A_GiveInventory("NTM_System_Actor", 1);
		}
	}
	
	override void WorldThingDied(WorldEvent e) {
		let mo = e.thing;
		
		if (mo.bIsMonster || mo is "PlayerPawn") {
			mo.bXFlip = Random(0, 1);
		}
	}
	
	override void WorldThingRevived(WorldEvent e) {
		DoThingRevive(e.thing);
	}
	
	void DoThingRevive(Actor mo) {
		if (mo.CountInv("NTM_System_Actor")) {
			let actorSystem = NTM_System_Actor(mo.FindInventory("NTM_System_Actor"));
			
			actorSystem.dead = false;
			actorSystem.gibbed = false;
			actorSystem.crushed = false;
		}
		
		mo.bXFlip = mo.default.bXFlip;
		
		if (!(mo is "PlayerPawn")) {
			mo.translation = mo.default.translation;
		}
	}
	
	override void CheckReplacement(ReplaceEvent e) {
		switch (e.replacee.GetClassName()) {
			case 'RealGibs':
				e.replacement = "NTM_RealGibs";
			break;
		}
	}
	
	override void CheckReplacee(ReplacedEvent e) {
		switch (e.replacement.GetClassName()) {
			case 'NTM_RealGibs':
				e.replacee = "RealGibs";
			break;
		}
	}
}

// System Base
class NTM_System : Inventory {
	Default {
		Inventory.MaxAmount 1;
		FloatBobPhase 0;
		
		+Inventory.Undroppable
		+Inventory.Untossable
		+Inventory.AutoActivate
	}
	
	States {
		Use:
			TNT1 A 0;
			Fail;
		
		Pickup:
			TNT1 A 0 {
				return true;
			}
			
			Stop;
	}
}

// Actor System
class NTM_System_Actor : NTM_System {
	bool dead, gibbed, crushed;
	int fallTics, footprintState, footprintTics, footprintSide, deathLastFrame;
	float deathLastHeight;
	Actor gibDummy, bloodPool, footprintBloodPool;
	
	override void PostBeginPlay() {
		super.PostBeginPlay();
		footprintSide = -1;
		deathLastFrame = -1;
	}
	
	override void Tick() {
		// Monster/Player death effects
		if (owner.health <= 0) {
			// Blood: Jittering death animation
			if (sv_ntm_enemyMove == 1 && !owner.bBoss) {
				int frame = owner.curState.frame;
				
				if (deathLastFrame != frame) {
					Vector2 spriteSize = TexMan.GetScaledSize(owner.curState.GetSpriteTexture(0));
					float spriteHeight = spriteSize.y;
					
					if (frame > 0) {
						float jitter = Max(0, (deathLastHeight - spriteHeight) * 0.5);
						
						owner.SetOrigin(owner.pos + (0, 0, owner.scale.y * jitter), false);
						owner.ClearInterpolation();
					}
					
					deathLastFrame = frame;
					deathLastHeight = spriteHeight;
				}
			}
			
			if (!owner.bNoBlood) {
				// Duke Nukem 3D: Blood splatter on long falls
				if (owner.pos.z <= owner.floorZ || owner.bOnMObj) {
					if (fallTics > 18 && owner.waterLevel == 0) {
						for (int i; i < Random(3, 6); i++) {
							owner.A_SpawnItemEx("NTM_FlyingBlood", 0, 0, 0, Random(-8, 8), Random(-8, 8), Random(3, 8), 0, SXF_UseBloodColor);
						}
						
						owner.A_StartSound("NTM_System_Actor/pancake");
					}
					
					fallTics = 0;
				} else {
					if (!(owner is "PlayerChunk")) {
						++fallTics;
					}
				}
				
				if (!dead) {
					if (!gibbed) {
						// Common: Ludicrous gibs and taunting
						if (owner.health < owner.GetGibHealth()) {
							for (int i; i < Random(5, 8); i++) {
								if (i >= 0 && i <= 2) {
									owner.A_SpawnItemEx("NTM_FlyingGib"..(i + 1), 0, 0, 0, Random(-10, 10), Random(-10, 10), Random(8, 12), 0, SXF_UseBloodColor);
								}
								
								owner.A_SpawnItemEx("NTM_FlyingBlood", 0, 0, 0, Random(-8, 8), Random(-8, 8), Random(3, 8), 0, SXF_UseBloodColor);
							}
							
							if (owner.target is "NTM_Player" && !Random(0, 5)) {
								owner.A_GiveToTarget("NTM_System_Taunt");
							}
							
							gibbed = true;
						}
					}
					
					dead = true;
				}
				
				// Duke Nukem 3D & Shadow Warrior: Blood pools
				if (!bloodPool && owner.health < (owner.GetGibHealth() * 0.666) && !(owner is "PlayerChunk") && owner.vel ~== (0, 0, 0) && owner.pos.z <= owner.floorZ) {
					bool result;
					Actor bloodP;
					
					[result, bloodP] = owner.A_SpawnItemEx("NTM_BloodPool", flags: SXF_UseBloodColor);
					
					if (bloodP) {
						bloodPool = bloodP;
						bloodP.target = owner;
						bloodP.SetOrigin(owner.pos, false);
					}
				}
				
				// Duke Nukem 3D: Stretchy gibs under crushers
				if (!crushed && owner.pos.z <= owner.floorZ && owner.ceilingZ <= (owner.pos.z + owner.GetDeathHeight())) {
					if (owner.radius > 31) {
						owner.A_SpawnItemEx("NTM_BigGibs", flags: SXF_UseBloodColor);
					} else {
						if (owner.radius > 23) {
							owner.A_SpawnItemEx("NTM_MediumGibs", flags: SXF_UseBloodColor);
						} else {
							owner.A_SpawnItemEx("NTM_SmallGibs", flags: SXF_UseBloodColor);
						}
					}
					
					crushed = true;
				}
				
				// Common: Gibbable corpses
				bool isGibbable = (dead && !gibbed && !crushed && owner.curState.tics == -1 && !owner.bNoBlood && !owner.bBoss);
				
				if (gibDummy) {
					if (!isGibbable) {
						gibDummy.Destroy();
						gibDummy = null;
					}
				} else {
					if (isGibbable) {
						let mo = NTM_Dummy_Gib(Actor.Spawn("NTM_Dummy_Gib", owner.pos));
						
						if (mo) {
							gibDummy = mo;
							gibDummy.tracer = owner;
							gibDummy.health = -owner.GetGibHealth() * 0.25;
							gibDummy.A_SetSize(owner.radius, owner.height);
						}
					}
				}
			}
		} else {
			// Duke Nukem 3D & Shadow Warrior: Bloody Footprints
			if (owner is "PlayerPawn" && owner.pos.z <= owner.floorZ) {
				if (owner.vel.Length() > 0) {
					--footprintTics;
					++footprintState;
					
					if (footprintState >= 8) {
						if (footprintTics > 0 && footprintBloodPool) {
							bool result;
							Actor footprint;
							double ang = owner.angle;
							
							[result, footprint] = footprintBloodPool.A_SpawnItemEx("NTM_BloodyFootprint", angle: ang, flags: SXF_TransferTranslation | SXF_AbsoluteAngle | SXF_NoCheckPosition);
							
							if (footprint) {
								double footAngle = ang + (footprintSide * 90);
								
								footprint.SetOrigin((owner.pos.x + Cos(footAngle) * 5, owner.pos.y + Sin(footAngle) * 5, owner.pos.z), false);
							}
						}
						
						footprintState = 0;
						footprintSide *= -1;
					}
				} else {
					footprintSide = -1;
					footprintState = 0;
				}
			}
			
			// Reset all death mechanics
			deathLastFrame = -1;
			bloodPool = null;
			
			if (gibDummy) {
				gibDummy.Destroy();
				gibDummy = null;
			}
		}
		
		Super.Tick();
	}
}

// Gib Dummy
class NTM_Dummy_Gib : Actor {
	Default {
		+DontGib
		+NotOnAutomap
		+NoGravity
		+Vulnerable
		-Synchronized
	}
	
	States {
		Spawn:
			TNT1 A -1;
			Stop;
		
		Death:
			TNT1 A 0 {
				if (tracer) {
					tracer.A_StartSound("misc/gibbed");
					tracer.sprite = GetSpriteIndex("NMGI");
					tracer.frame = 7;
					tracer.scale = (0.666, 0.666);
					
					if (!(tracer is "PlayerPawn")) {
						tracer.translation = tracer.bloodTranslation;
					}
					
					tracer.health = tracer.GetGibHealth() - 1;
					
					for (int i; i < Random(5, 8); i++) {
						if (i >= 0 && i <= 2) {
							tracer.A_SpawnItemEx("NTM_FlyingGib"..(i + 1), 0, 0, 0, Random(-10, 10), Random(-10, 10), Random(8, 12), 0, SXF_UseBloodColor);
						}
						
						tracer.A_SpawnItemEx("NTM_FlyingBlood", 0, 0, 0, Random(-8, 8), Random(-8, 8), Random(3, 8), 0, SXF_UseBloodColor);
					}
					
					let actorSystem = NTM_System_Actor(tracer.FindInventory("NTM_System_Actor"));
					
					if (actorSystem) {
						actorSystem.gibbed = true;
					}
				}
			}
			
			Stop;
	}
	
	override void Tick() {
		Super.Tick();
		
		if (tracer) {
			SetOrigin(tracer.pos, false);
		} else {
			Destroy();
		}
	}
}

// Taunt System
class NTM_System_Taunt : NTM_System {
	override void AttachToOwner(Actor user) {
		Super.AttachToOwner(user);
		
        if (!owner || owner.health <= 0) {
			return;
		}
		
		owner.A_StartSound("player/taunt", 2);
		DepleteOrDestroy();
	}
}