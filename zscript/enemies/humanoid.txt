class NTM_Humanoid : NTM_Enemy {
	property BurnSound: burnSound;
	Sound burnSound;
	
	States {
		Death.Fire:
			TNT1 A 1 {
				A_NoBlocking();
				
				NTM_Burn burn = NTM_Burn(Spawn("NTM_Burn", pos));
				
				if (burn) {
					burn.A_StartSound(burnSound, Chan_Voice);
					burn.A_SetSpecial(special, args[0], args[1], args[2], args[3], args[4]);
					burn.CopyFriendliness(self, true);
					burn.angle = angle;
					burn.vel = vel;
					burn.original = GetClass();
				}
			}
			
			Stop;
		
		XDeath:
		XDeath.Fire:
			NMGI A 5 A_NTM_XDeath;
			NMGI B 5 A_NoBlocking;
			NMGI CDEFG 5;
			NMGI H -1;
			Stop;
	}
}

class NTM_Burn : NTM_Enemy {
	class<NTM_Humanoid> original;
	
	Default {
		Height 56;
		Speed 7.5;
		Scale 0.7;
		NTM_Enemy.TicsPerChase 3;
		
		-IsMonster
		-CountKill
		-Solid
		-Shootable
		+NonShootable
		+NotAutoaimed
		+DropOff
		+NoBlood
		+NoTarget
	}
	
	States {
		Spawn:
			NBUR A 1 NoDelay A_StartSound("NTM_Burn/burn");
			
			NBUR A 0 {
				if (original) {
					readonly<NTM_Humanoid> def = GetDefaultByType(original);
					
					deathSound = def.deathSound;
				}
			}
			
			Goto See;
		
		See:
			NBUR A 0 A_SpawnItemEx("RocketSmokeTrail", -1, zofs: 40, zvel: 0.6);
			Goto Super::See;
		
		DukeSee:
			NBUR A 2 Bright A_Wander;
			NBUR A 3 Bright A_Wander;
			NBUR B 2 Bright A_Wander;
			NBUR B 3 Bright A_Wander;
			NBUR C 2 Bright A_Wander;
			NBUR C 3 Bright A_Wander;
			NBUR D 2 Bright A_Wander;
			NBUR D 3 Bright A_Wander;
			Goto SeeLoop;
		
		BloodSee:
			NBUR A 2 Bright A_NTM_BurnBloodWander;
			NBUR A 3 Bright A_NTM_BurnBloodWander;
			NBUR B 2 Bright A_NTM_BurnBloodWander;
			NBUR B 3 Bright A_NTM_BurnBloodWander;
			NBUR C 2 Bright A_NTM_BurnBloodWander;
			NBUR C 3 Bright A_NTM_BurnBloodWander;
			NBUR D 2 Bright A_NTM_BurnBloodWander;
			NBUR D 3 Bright A_NTM_BurnBloodWander;
			Goto SeeLoop;
		
		SWSee:
			NBUR A 1 Bright A_NTM_BurnSWWander;
			NBUR A 1 Bright A_NTM_BurnSWWander2;
			NBUR A 1 Bright A_NTM_BurnSWWander;
			NBUR AA 1 Bright A_NTM_BurnSWWander2;
			NBUR B 1 Bright A_NTM_BurnSWWander;
			NBUR B 1 Bright A_NTM_BurnSWWander2;
			NBUR B 1 Bright A_NTM_BurnSWWander;
			NBUR BB 1 Bright A_NTM_BurnSWWander2;
			NBUR C 1 Bright A_NTM_BurnSWWander;
			NBUR C 1 Bright A_NTM_BurnSWWander2;
			NBUR C 1 Bright A_NTM_BurnSWWander;
			NBUR CC 1 Bright A_NTM_BurnSWWander2;
			NBUR D 1 Bright A_NTM_BurnSWWander;
			NBUR D 1 Bright A_NTM_BurnSWWander2;
			NBUR D 1 Bright A_NTM_BurnSWWander;
			NBUR DD 1 Bright A_NTM_BurnSWWander2;
			Goto SeeLoop;
		
		SeeLoop:
			NBUR A 0 A_JumpIf(!invoker.CheckOnGround() || waterLevel > 0 || Random(0, 256) < 36, 1);
			Goto See;
			NBUR A 0 A_Die;
			
		Death:
			NBUR E 5 Bright A_Scream;
			NBUR FG 5 Bright;
		
		DeathLoop:
			NBUR H 4 Bright A_SpawnItemEx("RocketSmokeTrail", -1, zofs: 16, zvel: 0.6);
			NBUR IJK 4 Bright;
			NBUR K 0 A_JumpIf(waterLevel > 0 || Random(0, 256) < 32, 1);
			Goto DeathLoop;
			NBUR LMNO 4 Bright;
			NBUR P -1;
			Stop;
			
		Raise:
			NBUR ONMLGFE 3 Bright;
			
			NBUR A 0 {
				if (original) {
					Actor revive = Spawn(original, pos);
					
					if (revive) {
						revive.A_SetSpecial(special, args[0], args[1], args[2], args[3], args[4]);
						revive.CopyFriendliness(self, true);
						revive.angle = angle;
					}
				}
			}
			
			Stop;
	}
	
	void A_NTM_BurnBloodWander() {
		int tpc = NTM_Enemy(self).ticsPerChase;
				
		speed /= tpc;
		A_Wander();
		speed *= tpc;
		A_Recoil(speed * -0.105);
	}
	
	void A_NTM_BurnSWWander() {
		int tpc = NTM_Enemy(self).ticsPerChase;
				
		speed /= tpc;
		A_Wander();
		speed *= tpc;
	}
	
	void A_NTM_BurnSWWander2() {
		int tpc = NTM_Enemy(self).ticsPerChase;
				
		speed /= tpc;
		A_Wander(CHF_NoRandomTurn | CHF_DontTurn);
		speed *= tpc;
	}
}